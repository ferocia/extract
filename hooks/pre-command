#!/bin/bash

set -euo pipefail

root="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# shellcheck source=lib/lib.bash
. "$root/lib/lib.bash"

# Variables we'll be cleaning up later
container=
index_file=

cleanup() {
  if test -n "$container"; then
    docker container rm "$container" >/dev/null
  fi

  if test -n "$index_file"; then
    rm "$index_file"
  fi
}

header "Setting up configuration"
validate-config

# Once we've finished validating the config, we can ensure that all options are set
# appropriately. This means it's safe to set up our cleanup function since we know that
# these are going to be created.
trap cleanup exit

image="$(image-name)"
pull="$(get-config-with-default pull true)"

destination_path="$(get-config-with-default to .)"

source_path="$(normalize-path "$(get-config from)")"

# Determine how many path components to strip from the resulting tar archive - archiving
# the path /var/www/html results in an archive where all paths start with html, so we
# need to remove that prefix (but not if the path is /, which has no prefix)
components=1
if test "$source_path" = /; then
  components=0
fi

# Dump configuration in verbose mode
verbose "Image: $image"
verbose "Pull: $pull"
verbose "Source path: $source_path"
verbose "Destination path:"
verbose "  From configuration: $destination_path"
verbose "  On disk: $PWD/$destination_path"

# Now that we've determined our config, output a new header so that folks know what's
# going on, even without verbose enabled
header "Extracting $image to $destination_path"

# Pull the image unless the user told us not to
if is-truthy "$pull"; then
  verbose "Pulling $image"
  docker pull "$image"
fi

# Prepare destination path
verbose "Creating $destination_path"
mkdir -p "$destination_path"

# Run the container in order to make 'docker cp' work - since the container doesn't need
# to actually be running, we just use /bin/true to get a stopped container
container="$(docker run --detach "$image" /bin/true)"

index_file="$(mktemp)"

# Stream the filesystem archive through tar
docker cp "$container:$source_path" - |
  tar \
    --file - \
    --extract \
    --verbose \
    --show-transformed-names \
    --index-file="$index_file" \
    --strip-components "$components" \
    --directory "$destination_path"

count="$(wc -l "$index_file" | cut -d' ' -f1)"

echo "Extracted $count file(s) from $source_path to $destination_path"
